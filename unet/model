

import torch
import torch.nn as nn
import numpy as np
import matplotlib.pyplot as plt
import torch.nn.functional as F
import torch.optim as optim

#Doing Convolution Operation
# def double_conv()
class DoubleConv(nn.Module):
    """(convolution => [BN] => ReLU) * 2"""

    def __init__(self, in_channels, out_channels, mid_channels=None):
        super().__init__()
        if not mid_channels:
            mid_channels = out_channels
        self.double_conv = nn.Sequential(
            nn.Conv2d(in_channels, mid_channels, kernel_size=3),
            nn.BatchNorm2d(mid_channels),
            nn.ReLU(inplace=True),
            nn.Conv2d(mid_channels, out_channels, kernel_size=3),
            nn.BatchNorm2d(out_channels),
            nn.ReLU(inplace=True)
        )

    def forward(self, x):
        return self.double_conv(x)

##Downsamping
class Down(nn.Module):
    """Downscaling with maxpool then double conv"""

    def __init__(self, in_channels, out_channels):
        super().__init__()
        self.maxpool_conv = nn.Sequential(
            nn.MaxPool2d(2),
            DoubleConv(in_channels, out_channels)
        )

    def forward(self, x):
        return self.maxpool_conv(x)


class Up(nn.Module):
    """Upscaling then double conv"""

    def __init__(self, in_channels, out_channels, bilinear=True):
        super().__init__()

        # if bilinear, use the normal convolutions to reduce the number of channels
        if bilinear:
            self.up = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)
            self.conv = DoubleConv(in_channels, out_channels, in_channels // 2)
        else:
            self.up = nn.ConvTranspose2d(in_channels, in_channels // 2, kernel_size=2, stride=2)
            self.conv = DoubleConv(in_channels, out_channels)

    def forward(self, x1, x2):
        x1 = self.up(x1)
        # print("****", x1.size())
        # input is CHW
        delta = (x2.size()[2] - x1.size()[2])

        # x1 = F.pad(x1, [diffX // 2, diffX - diffX // 2,
        #                 diffY // 2, diffY - diffY // 2])
        if (delta % 2 == 0):
            delta = delta // 2
            x2 = x2[:, :, delta:x2.size()[2] - delta, delta:x2.size()[2] - delta]
        elif (delta % 2 != 0):
            delta = delta // 2
            x2 = x2[:, :, delta:x2.size()[2] - delta - 1, delta:x2.size()[2] - delta - 1]

        # print(x2.size())
        # if you have padding issues, see
        # https://github.com/HaiyongJiang/U-Net-Pytorch-Unstructured-Buggy/commit/0e854509c2cea854e247a9c615f175f76fbb2e3a
        # https://github.com/xiaopeng-liao/Pytorch-UNet/commit/8ebac70e633bac59fc22bb5195e513d5832fb3bd
        x = torch.cat([x2, x1], dim=1)
        # print("###", x.size())
        return self.conv(x)


class OutConv(nn.Module):
    def __init__(self, in_channels, out_channels):
        super(OutConv, self).__init__()
        self.conv = nn.Conv2d(in_channels, out_channels, kernel_size=1)

    def forward(self, x):
        return self.conv(x)


class UNet(nn.Module):
    def __init__(self, n_channels, n_classes, bilinear=True):
        super(UNet, self).__init__()
        self.n_channels = n_channels
        self.n_classes = n_classes
        self.bilinear = bilinear

        self.inc = DoubleConv(n_channels, 64)
        self.down1 = Down(64, 128)
        self.down2 = Down(128, 256)
        self.down3 = Down(256, 512)
        factor = 2 if bilinear else 1
        self.down4 = Down(512, 1024 // factor)
        self.up1 = Up(1024, 512 // factor, bilinear)
        self.up2 = Up(512, 256 // factor, bilinear)
        self.up3 = Up(256, 128 // factor, bilinear)
        self.up4 = Up(128, 64, bilinear)
        self.outc = OutConv(64, n_classes)

    def forward(self, x):
        x = F.pad(x, [93, 93, 93, 93])
        x1 = self.inc(x)
        # print("x1", x1.size())
        x2 = self.down1(x1)
        # print("x2",x2.size())
        x3 = self.down2(x2)
        # print("x3", x3.size())
        x4 = self.down3(x3)
        # print("x4", x4.size())
        x5 = self.down4(x4)
        # print("x5", x5.size())
        x6 = self.up1(x5, x4)
        # print("x6", x6.size())
        x7 = self.up2(x6, x3)
        # print("x7", x7.size())
        x8 = self.up3(x7, x2)
        # print("x8" ,x8.size())
        x9 = self.up4(x8, x1)
        # print("x9",x9.size())
        logits = self.outc(x9)
        # print("out",logits.size())
        return logits


# if __name__ == "__main__":
#     image = torch.rand((1, 1, 512, 512))
#     image = F.pad(image, [93, 93, 93, 93])
#     model = UNet(1, 1)
#     print(model(image))


##total parameters used in out  model
def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)

def test():
    x=torch.randn((1,1,500,500))
    x = F.pad(x, [93, 93, 93, 93])
    model=UNet(1,1)
    preds=model(x)
    # print(x.shape)
    # assert preds.shape == x.shape

if __name__ == '__main__':
    test()
